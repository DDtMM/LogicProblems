@use "sass:color";
@import "../shared/variables";

// this is synced with problem-host flex direction so that it takes up full space on the cross direction.
svg {
  width: 100%;
  user-select: none;
  @media (min-aspect-ratio: 8/9) {
    width: unset;
    height: 100%;
  }
}

.grid-cell {
  > rect {
    stroke-width: .25;
  }
  > text {
    font: 10px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    text-rendering: optimizeLegibility;
    &.cat-label {
      font-weight: bold;
    }
    fill: #000;
  }
}

@function getGridFillColor($idx, $baseColor, $altColor, $stepAmt) {
  $color: if($altColor == null or ($idx % 2) == 1, $baseColor, $altColor);
  @return if($stepAmt == null, $color, color.adjust($color, $lightness: ($idx - 1) * $stepAmt));
}
@each $theme, $themeMap in $themes {
  $colorX: map-get($themeMap, colorX);
  $colorY: map-get($themeMap, colorY);
  $colorXAlt: map-get($themeMap, colorXAlt);
  $colorYAlt: map-get($themeMap, colorYAlt);
  $foreColor: map-get($themeMap, foreColor);
  $stepAmt: map-get($themeMap, gridColorStepAmt);

  .theme-#{$theme} {
    rect {
      stroke: $foreColor;
    }
    .grid-cell {
      > text {
        fill: $foreColor;
      }

      @for $i from 1 through 5 {
        $stepColorX: getGridFillColor($i, $colorX, $colorXAlt, $stepAmt);
        $stepColorY: getGridFillColor($i, $colorY, $colorYAlt, $stepAmt);

        &.cat-x-#{$i}, .cat-x-#{$i} {
          fill: $stepColorX;
        }
        &.cat-y-#{$i}, .cat-y-#{$i} {
          fill: $stepColorY;
          // create classes for when y and x intersect.
          @for $j from 1 through 5 {
            $innerColorX: getGridFillColor($j, $colorX, $colorXAlt, $stepAmt);
            &.cat-x-#{$j} {
              fill: mix($innerColorX, $stepColorY, 50%);
            }
          }
        }
      }
    }
  }
}
